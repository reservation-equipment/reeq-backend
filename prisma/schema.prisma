generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model areas {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  square        Int?
  appointment   String?
  institutes_id Int
  description   String?
  address       String?      @db.VarChar(255)
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime     @default(now()) @db.Timestamptz(6)
  institutes    institutes   @relation(fields: [institutes_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  equipments    equipments[]
}

model booking {
  id           Int           @id @default(autoincrement())
  date         DateTime      @db.Date
  time_from    String        @db.VarChar(5)
  time_to      String        @db.VarChar(5)
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  user_id      Int
  equipment_id Int
  status       StatusBooking @default(CREATED)
  equipments   equipments    @relation(fields: [equipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model equipments {
  id          Int             @id @default(autoincrement())
  area_id     Int
  name        String          @db.VarChar(255)
  description String?
  count       Int
  img_hrefs   String[]
  created_at  DateTime        @default(now()) @db.Timestamptz(6)
  updated_at  DateTime        @default(now()) @db.Timestamptz(6)
  booking     booking[]
  areas       areas           @relation(fields: [area_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model institutes {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(100)
  areas areas[]
}

model roles {
  id    Int     @id @default(autoincrement())
  role  Roles   @default(USER)
  users users[]
}

model users {
  id          Int       @id @default(autoincrement())
  role_id     Int?
  first_name  String?   @db.VarChar(70)
  second_name String?   @db.VarChar(70)
  password    String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  email       String    @unique @default("") @db.VarChar(70)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  booking     booking[]
  tokens      tokens?
  roles       roles?    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tokens {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  refresh_token String   @unique
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum Roles {
  OWNER
  ADMIN
  USER
}

enum StatusBooking {
  CREATED
  COMPLETE
  EXPIRED
}