generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model areas {
  id            Int          @id @default(autoincrement())
  institutes_id Int
  name          String?      @db.VarChar(255)
  square        Int?
  appointment   String?
  institutes    institutes?  @relation(fields: [institutes_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  booking       booking[]
  equipments    equipments[]
}

model booking {
  id           Int           @id @default(autoincrement())
  date_from    DateTime      @db.Date
  date_to      DateTime      @db.Date
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  status       StatusBooking @default(Created)
  user_id      Int
  equipment_id Int
  area_id      Int
  areas        areas?        @relation(fields: [area_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  equipments   equipments?   @relation(fields: [equipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model equipments {
  id          Int       @id @default(autoincrement())
  area_id     Int
  name        String    @db.VarChar(255)
  description String?
  count       Int
  booking     booking[]
  areas       areas     @relation(fields: [area_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model institutes {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(100)
  areas areas[]
}

model roles {
  id    Int     @id @default(autoincrement())
  role  Roles   @default(USER)
  users users[]
}

enum Roles {
  OWNER
  ADMIN
  USER
}

enum StatusBooking {
  Created
  Complete
}

model users {
  id          Int       @id @default(autoincrement())
  role_id     Int?
  first_name  String?   @db.VarChar(70)
  second_name String?   @db.VarChar(70)
  mail        String    @db.VarChar(70)
  password    String    @db.Text
  booking     booking[]
  roles       roles?    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tokens      tokens?
}

model tokens {
  id            Int    @id @default(autoincrement())
  user_id       Int    @unique
  refresh_token String @db.Text @unique
  users         users? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
